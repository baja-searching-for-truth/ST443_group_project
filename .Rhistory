for(i in 1:max_variables){
pred =predict_regsubsets(fit_fwd, data_for_CV[folds==k,], id=i)
cv_errors[k,i] =mean((data_for_CV$monthly_excess_return[folds==k]-pred)^2)
}
}
}
CV_fwd <- function(data_for_CV,fold_number,max_variables)
{
cv_errors =matrix(0,fold_number, max_variables)
for(k in 1:fold_number){
fit_fwd = regsubsets(monthly_excess_return~., data=data_for_CV[folds!=k,], nvmax=max_variables, method="foreward")
print(k)
for(i in 1:max_variables){
pred =predict_regsubsets(fit_fwd, data_for_CV[folds==k,], id=i)
cv_errors[k,i] =mean((data_for_CV$monthly_excess_return[folds==k]-pred)^2)
}
}
}
CV_fwd <- function(data_for_CV,fold_number,max_variables)
{
cv_errors =matrix(0,fold_number, max_variables)
for(k in 1:fold_number){
fit_fwd = regsubsets(monthly_excess_return~., data=data_for_CV[folds!=k,], nvmax=max_variables, method="foreward")
print(k)
for(i in 1:max_variables){
pred =predict_regsubsets(fit_fwd, data_for_CV[folds==k,], id=i)
cv_errors[k,i] =mean((data_for_CV$monthly_excess_return[folds==k]-pred)^2)
}
}
return (sqrt(apply(cv_errors,2,mean)))
}
CV_bwd <- function(data_for_CV,fold_number,max_variables)
{
cv_errors =matrix(0,fold_number, max_variables)
for(k in 1:fold_number){
fit_bwd = regsubsets(monthly_excess_return~., data=data_for_CV[folds!=k,], nvmax=max_variables, method="backward")
print(k)
for(i in 1:max_variables){
pred =predict_regsubsets(fit_bwd, data_for_CV[folds==k,], id=i)
cv_errors[k,i] =mean((data_for_CV$monthly_excess_return[folds==k]-pred)^2)
}
}
return (sqrt(apply(cv_errors,2,mean)))
}
test=CV_fwd(data_for_CV,5,60)
CV_fwd <- function(data_for_CV,fold_number,max_variables)
{
cv_errors =matrix(0,fold_number, max_variables)
for(k in 1:fold_number){
fit_fwd = regsubsets(monthly_excess_return~., data=data_for_CV[folds!=k,], nvmax=max_variables, method="forward")
print(k)
for(i in 1:max_variables){
pred =predict_regsubsets(fit_fwd, data_for_CV[folds==k,], id=i)
cv_errors[k,i] =mean((data_for_CV$monthly_excess_return[folds==k]-pred)^2)
}
}
return (sqrt(apply(cv_errors,2,mean)))
}
test=CV_fwd(data_for_CV,5,60)
test=CV_fwd(data_for_CV,5,60)
data_for_CV[folds!=1]
data_for_CV[folds!=1,]
#backward
cv_errors =matrix(0,5, max_variables)
CV_fwd <- function(data_for_CV,fold_number,max_variables)
{
set.seed(11)
## We initialize a error matrix with row (10 different folds) and column (19 different predictors)
fold_number=5
folds = sample(rep(1:fold_number, length = nrow(stock_returns_with_factors)))
cv_errors =matrix(0,fold_number, max_variables)
for(k in 1:fold_number){
fit_fwd = regsubsets(monthly_excess_return~., data=data_for_CV[folds!=k,], nvmax=max_variables, method="forward")
print(k)
for(i in 1:max_variables){
pred =predict_regsubsets(fit_fwd, data_for_CV[folds==k,], id=i)
cv_errors[k,i] =mean((data_for_CV$monthly_excess_return[folds==k]-pred)^2)
}
}
return (sqrt(apply(cv_errors,2,mean)))
}
CV_bwd <- function(data_for_CV,fold_number,max_variables)
{
set.seed(11)
## We initialize a error matrix with row (10 different folds) and column (19 different predictors)
fold_number=5
folds = sample(rep(1:fold_number, length = nrow(stock_returns_with_factors)))
cv_errors =matrix(0,fold_number, max_variables)
for(k in 1:fold_number){
fit_bwd = regsubsets(monthly_excess_return~., data=data_for_CV[folds!=k,], nvmax=max_variables, method="backward")
print(k)
for(i in 1:max_variables){
pred =predict_regsubsets(fit_bwd, data_for_CV[folds==k,], id=i)
cv_errors[k,i] =mean((data_for_CV$monthly_excess_return[folds==k]-pred)^2)
}
}
return (sqrt(apply(cv_errors,2,mean)))
}
test=CV_fwd(data_for_CV,5,60)
test=CV_fwd(data_for_CV,5,60)
set.seed(11)
## We initialize a error matrix with row (10 different folds) and column (19 different predictors)
fold_number=5
folds = sample(rep(1:fold_number, length = nrow(stock_returns_with_factors)))
folds
max_variables=60
cv_errors =matrix(0,5, max_variables)
data_for_CV=excess_return_with_pca_factors
## We write a for loop that performs cross-validation, in the kth fold, the elemetns of folds that equal k are in the test set and the remiander are in the training set
for(k in 1:fold_number){
fit_fwd = regsubsets(monthly_excess_return~., data=data_for_CV[folds!=k,], nvmax=max_variables, method="forward")
print(k)
for(i in 1:max_variables){
pred =predict_regsubsets(fit_fwd, data_for_CV[folds==k,], id=i)
cv_errors[k,i] =mean((data_for_CV$monthly_excess_return[folds==k]-pred)^2)
}
}
## Average of the cv_error over all 10 folds
rmse_cv_fwd =sqrt(apply(cv_errors,2,mean))
## Plot of Root MSE vs model size and choose the optimal model size
#backward
cv_errors =matrix(0,5, max_variables)
for(k in 1:fold_number){
fit_fwd = regsubsets(monthly_excess_return~., data=data_for_CV[folds!=k,], nvmax=max_variables, method="backward")
print(k)
for(i in 1:max_variables){
pred =predict_regsubsets(fit_fwd, data_for_CV[folds==k,], id=i)
cv_errors[k,i] =mean((data_for_CV$monthly_excess_return[folds==k]-pred)^2)
}
}
## Average of the cv_error over all 10 folds
rmse_cv_bwd =sqrt(apply(cv_errors,2,mean))
## Plot of Root MSE vs model size and choose the optimal model size
plot(rmse_cv_fwd, ylab="Root MSE", xlab="Model Size", pch=max_variables,  col="red",type="l",main="5-Fold Cross Validation Using \nSubset Selection on Stock Returns \n and Principal Components")
which.min(rmse_cv_fwd)
points(which.min(rmse_cv_fwd), rmse_cv_fwd[which.min(rmse_cv_fwd)], col="red", cex=2, pch=20)
lines(rmse_cv_bwd, pch=max_variables, col="blue", type="l")
which.min(rmse_cv_bwd)
points(which.min(rmse_cv_bwd), rmse_cv_bwd[which.min(rmse_cv_bwd)], col="blue", cex=2, pch=20)
#CV for Factors
data_for_CV=stock_returns_with_factors
## We write a for loop that performs cross-validation, in the kth fold, the elemetns of folds that equal k are in the test set and the remiander are in the training set
for(k in 1:fold_number){
fit_fwd = regsubsets(monthly_excess_return~., data=data_for_CV[folds!=k,], nvmax=max_variables, method="forward")
print(k)
for(i in 1:max_variables){
pred =predict_regsubsets(fit_fwd, data_for_CV[folds==k,], id=i)
cv_errors[k,i] =mean((data_for_CV$monthly_excess_return[folds==k]-pred)^2)
}
}
## Average of the cv_error over all 10 folds
rmse_cv_fwd =sqrt(apply(cv_errors,2,mean))
## Plot of Root MSE vs model size and choose the optimal model size
#backward
cv_errors =matrix(0,5, max_variables)
for(k in 1:fold_number){
fit_fwd = regsubsets(monthly_excess_return~., data=data_for_CV[folds!=k,], nvmax=max_variables, method="backward")
print(k)
for(i in 1:max_variables){
pred =predict_regsubsets(fit_fwd, data_for_CV[folds==k,], id=i)
cv_errors[k,i] =mean((data_for_CV$monthly_excess_return[folds==k]-pred)^2)
}
}
## Average of the cv_error over all 10 folds
rmse_cv_bwd =sqrt(apply(cv_errors,2,mean))
lines(rmse_cv_fwd, pch=max_variables, col="green", type="l")
which.min(rmse_cv_fwd)
points(which.min(rmse_cv_fwd), rmse_cv_fwd[which.min(rmse_cv_fwd)], col="green", cex=2, pch=20)
lines(rmse_cv_bwd, pch=max_variables, col="purple", type="l")
which.min(rmse_cv_bwd)
points(which.min(rmse_cv_bwd), rmse_cv_bwd[which.min(rmse_cv_bwd)], col="purple", cex=2, pch=20)
legend(x = "topright",          # Position
legend = c("Forward Components", "Backward Components","Forward Factors", "Backward Factors"),  # Legend texts
col = c("red", "blue","green", "purple"),           # Line colors
lwd = 2)                 # Line width
acf(log(ulsp))
setwd("C:\\Users\\technoplanet\\Desktop\\LSE Projects\\ST422\\Project")
fuel=read.csv("Fuel_price.csv")
ulsp = msts(fuel[,2], seasonal=365.25/7,
start = decimal_date(as.Date("2003-06-09")))
auto.arima(log(ulsp))
return_ulsp=diff(log(ulsp))
acf(log(ulsp))
ulsp = msts(fuel[,2], seasonal=365.25/7,
start = decimal_date(as.Date("2003-06-09")))
library(forecast)
library(lubridate)
library(purrr)
library(tidyr)
library(dplyr)
setwd("C:\\Users\\technoplanet\\Desktop\\LSE Projects\\ST422\\Project")
fuel=read.csv("Fuel_price.csv")
ulsp = msts(fuel[,2], seasonal=365.25/7,
start = decimal_date(as.Date("2003-06-09")))
auto.arima(log(ulsp))
return_ulsp=diff(log(ulsp))
acf(log(ulsp))
pacf(log(ulsp))
par(mfrow=c(2,1))
acf(log(ulsp))
pacf(log(ulsp))
acf(log(ulsp))
pacf(log(ulsp))
ggAcf(diff_ulsd)
ggPacf(diff_ulsd)
ggAcf(ulsp)
ggPacf(ulsp)
par(mfrow=c(2,1))
ggAcf(ulsp)
ggPacf(ulsp)
par(mfrow=c(1),1))
ggAcf(ulsp)
ggPacf(ulsp)
par(mfrow=c(1,1))
ggAcf(ulsp)
library(tseries)
ggAcf(ulsp)
ggPacf(ulsp)
acf(ulsp)
pacf(ulsp)
plot(log(ulsp))
plot(diff(log(ulsp)))
plot(diff(log(ulsd)))
ulsd = msts(fuel[,3], seasonal=365.25/7,
start = decimal_date(as.Date("2003-06-09")))
plot(diff(log(ulsd)))
acf_pacf <- function(ts)
{
windows()
par(mfrow=c(1,2))
acf(ts)
pacf(ts)
}
acf_pacf(diff(log(ulsp)))
acf_pacf <- function(ts)
{
windows()
par(mfrow=c(2,1))
acf(ts)
pacf(ts)
}
acf_pacf(diff(log(ulsp)))
acf_pacf(diff(log(ulsp)),'diff(log(ulsp))')
acf_pacf <- function(ts,name_ts)
{
windows()
par(mfrow=c(2,1))
acf(ts,snames=name_ts)
pacf(ts,snames=name_ts)
}
acf_pacf(diff(log(ulsp)),'diff(log(ulsp))')
acf_pacf <- function(ts,name_ts)
{
windows()
par(mfrow=c(2,1))
acf_now=acf(ts,plot=FALSE)
pacf_now=pacf(ts,plot=FALSE)
plot(acf_now,main=paste(name_ts," ACF"))
plot(pacf_now,main=paste(name_ts," PACF"))
}
acf_pacf(diff(log(ulsp)),'diff(log(ulsp))')
acf_pacf(diff(log(ulsd)),'diff(log(ulsd))')
acf_pacf(diff(ulsp),'diff(ulsp)')
acf_pacf(diff(ulsd),'diff(ulsd)')
library(purrr)
library(tidyr)
library(dplyr)
library(corrplot)
library(class)
setwd("C:\\Users\\technoplanet\\Desktop\\LSE Projects\\ST443\\Group Project")
data=read.csv("factor_data_sum.csv")
data_filtered=data %>% filter(X>=72)  %>% select(-X)  %>% select(-date) %>% select(-RF)
pr.out <-prcomp(data_filtered, scale=TRUE)
pr.var <-pr.out$sdev^2
pve <-pr.var/sum(pr.var)
par(mfrow=c(1,2))
plot(pve, xlab="Principal Component", ylab="Proportion of Variance Explained", ylim=c(0,1), type='l',cex.lab=0.8,lwd = 2)
plot(cumsum(pve), xlab="Principal Component", ylab="Cumulative Proportion of Variance Explained", ylim=c(0,1), type='l',cex.lab=0.8,lwd = 2)
res <- cor(data_filtered, method="pearson")
mtext("Variance Explained Against Number of Principal Components",                   # Add main title
side = 3,
line = - 2,
outer = TRUE)
pca=princomp(data_filtered)
load=loadings(pca)
data_matrix=data.matrix(data_filtered)
loading_matrix=data.matrix(load[,])
pca_factors=data.frame(data_matrix %*% loading_matrix)
pca_factors$date=data %>% filter(X>=72) %>% select(date)
pca_factors$date=map(pca_factors$date[,1],function(x) format(as.Date(x),"%Y-%m-%d"))
stock_trading_data=read.csv("cleaned_stock_return_with_factors.csv")
stock_trading_data_raw=stock_trading_data %>% mutate(monthly_excess_return=monthly_return-RF) %>% select(c("date","monthly_excess_return"))
excess_return_with_pca_factors=merge(stock_trading_data_raw,pca_factors,by="date") %>% select(-date)
lmodel=lm(monthly_excess_return~.,data=excess_return_with_pca_factors)
principal_component_number_grid=1:50
count_grid=1:length(principal_component_number_grid)
MSE=vector()
R_squared=vector()
for (i in count_grid)
{
print(i)
temp=excess_return_with_pca_factors[1:principal_component_number_grid[i]]
lmodel=lm(monthly_excess_return~.,data=temp)
MSE[i]=mean(lmodel$residuals^2)
R_squared[i]=summary(lmodel)$r.squared
}
plot(test_grid,MSE,type='l',xlab="Principal Components")
plot(test_grid,R_squared,type='l',xlab="Principal Components")
mtext("Result of Regression on All Stocks",                   # Add main title
side = 3,
line = - 2,
outer = TRUE)
principal_component_number_grid=1:50
count_grid=1:length(principal_component_number_grid)
MSE=vector()
R_squared=vector()
for (i in count_grid)
{
print(i)
temp=excess_return_with_pca_factors[1:principal_component_number_grid[i]]
lmodel=lm(monthly_excess_return~.,data=temp)
MSE[i]=mean(lmodel$residuals^2)
R_squared[i]=summary(lmodel)$r.squared
}
plot(principal_component_number_grid,MSE,type='l',xlab="Principal Components")
plot(principal_component_number_grid,R_squared,type='l',xlab="Principal Components")
mtext("Result of Regression on All Stocks",                   # Add main title
side = 3,
line = - 2,
outer = TRUE)
stock_trading_data_raw_to_group=stock_trading_data %>% mutate(monthly_excess_return=monthly_return-RF) %>% dplyr::select(c("date","monthly_excess_return","stock_name")) %>% spread(stock_name,monthly_excess_return) %>% dplyr::select(-date)
Rollingwindow <- function(data,D,A=1)
{
count_load_appearance <- load_1 %>% mutate(count=0) %>% select(-loading)
factor_name=names(data_filtered)
initial=1+D
count=1
series=list(0)
fit=list(0)
SE=vector()
stop_loop_signal=FALSE
continue=TRUE
PCA_1=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
PCA_2=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
PCA_3=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
while ((initial<=dim(data)[1]) && (continue==TRUE))
{
print(initial)
data_this_window= data %>% slice((initial-D):(initial))
PCA=princomp(data_this_window)
load=loadings(PCA)
temp=load[,1] %>% data.frame
names(temp)="loading"
temp=temp %>% arrange(desc(abs(loading))) %>% head(10)
count_present=temp[factor_name,]
count_present[is.na(count_present)] <- 0
count_load_appearance$count_present=count_present %>%map(function(x) if (!x==0) {x=1} else {x=0}) %>% unlist
count_load_appearance$count=count_load_appearance$count+count_load_appearance$count_present
count_load_appearance=count_load_appearance %>% select(-count_present)
PCA_1=rbind(PCA_1,data.frame(load[,1]%>% t))
PCA_2=rbind(PCA_2,data.frame(load[,2]%>% t))
PCA_3=rbind(PCA_3,data.frame(load[,3]%>% t))
initial=initial+A
if (stop_loop_signal==TRUE){continue=FALSE}
if (initial>=dim(data)[1]){stop_loop_signal=TRUE}
if (initial>dim(data)[1]){initial=dim(data)[1]}
}
return (list(PCA_1,PCA_2,PCA_3,count_load_appearance))
}
result=Rollingwindow(data_filtered,110,1)
plot_bar=result[[4]] %>% filter(!count==0) %>% arrange(desc(count)) %>% head(20)
Rollingwindow <- function(data,D,A=1)
{
count_load_appearance <- load_1 %>% mutate(count=0) %>% select(-loading)
factor_name=names(data_filtered)
initial=1+D
count=1
series=list(0)
fit=list(0)
SE=vector()
stop_loop_signal=FALSE
continue=TRUE
PCA_1=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
PCA_2=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
PCA_3=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
while ((initial<=dim(data)[1]) && (continue==TRUE))
{
print(initial)
data_this_window= data %>% slice((initial-D):(initial))
PCA=princomp(data_this_window)
load=loadings(PCA)
temp=load[,1] %>% data.frame
names(temp)="loading"
temp=temp %>% arrange(desc(abs(loading))) %>% head(10)
count_present=temp[factor_name,]
count_present[is.na(count_present)] <- 0
count_load_appearance$count_present=count_present %>%map(function(x) if (!x==0) {x=1} else {x=0}) %>% unlist
count_load_appearance$count=count_load_appearance$count+count_load_appearance$count_present
count_load_appearance=count_load_appearance %>% select(-count_present)
PCA_1=rbind(PCA_1,data.frame(load[,1]%>% t))
PCA_2=rbind(PCA_2,data.frame(load[,2]%>% t))
PCA_3=rbind(PCA_3,data.frame(load[,3]%>% t))
initial=initial+A
if (stop_loop_signal==TRUE){continue=FALSE}
if (initial>=dim(data)[1]){stop_loop_signal=TRUE}
if (initial>dim(data)[1]){initial=dim(data)[1]}
}
return (list(PCA_1,PCA_2,PCA_3,count_load_appearance))
}
result=Rollingwindow(data_filtered,110,1)
data_small_filtered=data_filtered %>% slice(12:151)
pca_stock=princomp(data_small_filtered)
load_stock=loadings(pca_stock)
PCA_1=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
load_1=data.frame(load_stock[,3])
load_1
names(load_1)=c("loading")
pca=princomp(data_filtered)
load=loadings(pca)
load
loading_now=data_filtered %>% princomp%>% loadings
loading_now
loading_now[,3]
Rollingwindow <- function(data,D,A=1)
{
loadings_temp=data %>% princomp %>% loadings
load_temp=loadings_temp[,1] %>% data.frame
count_load_appearance <- load_temp %>% mutate(count=0) %>% select(-loading)
factor_name=names(data_filtered)
initial=1+D
count=1
series=list(0)
fit=list(0)
SE=vector()
stop_loop_signal=FALSE
continue=TRUE
PCA_1=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
PCA_2=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
PCA_3=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
while ((initial<=dim(data)[1]) && (continue==TRUE))
{
print(initial)
data_this_window= data %>% slice((initial-D):(initial))
PCA=princomp(data_this_window)
load=loadings(PCA)
temp=load[,1] %>% data.frame
names(temp)="loading"
temp=temp %>% arrange(desc(abs(loading))) %>% head(10)
count_present=temp[factor_name,]
count_present[is.na(count_present)] <- 0
count_load_appearance$count_present=count_present %>%map(function(x) if (!x==0) {x=1} else {x=0}) %>% unlist
count_load_appearance$count=count_load_appearance$count+count_load_appearance$count_present
count_load_appearance=count_load_appearance %>% select(-count_present)
PCA_1=rbind(PCA_1,data.frame(load[,1]%>% t))
PCA_2=rbind(PCA_2,data.frame(load[,2]%>% t))
PCA_3=rbind(PCA_3,data.frame(load[,3]%>% t))
initial=initial+A
if (stop_loop_signal==TRUE){continue=FALSE}
if (initial>=dim(data)[1]){stop_loop_signal=TRUE}
if (initial>dim(data)[1]){initial=dim(data)[1]}
}
return (list(PCA_1,PCA_2,PCA_3,count_load_appearance))
}
result=Rollingwindow(data_filtered,110,1)
stock_trading_data_raw_to_group=stock_trading_data %>% mutate(monthly_excess_return=monthly_return-RF) %>% dplyr::select(c("date","monthly_excess_return","stock_name")) %>% spread(stock_name,monthly_excess_return) %>% dplyr::select(-date)
Rollingwindow <- function(data,D,A=1)
{
loadings_temp=data %>% princomp %>% loadings
load_temp=loadings_temp[,1] %>% data.frame
names(load_temp)=c("loading")
count_load_appearance <- load_temp %>% mutate(count=0) %>% select(-loading)
factor_name=names(data_filtered)
initial=1+D
count=1
series=list(0)
fit=list(0)
SE=vector()
stop_loop_signal=FALSE
continue=TRUE
PCA_1=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
PCA_2=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
PCA_3=data.frame(matrix(ncol=107,nrow=0, dimnames=list(NULL, names(data_filtered))))
while ((initial<=dim(data)[1]) && (continue==TRUE))
{
print(initial)
data_this_window= data %>% slice((initial-D):(initial))
PCA=princomp(data_this_window)
load=loadings(PCA)
temp=load[,1] %>% data.frame
names(temp)="loading"
temp=temp %>% arrange(desc(abs(loading))) %>% head(10)
count_present=temp[factor_name,]
count_present[is.na(count_present)] <- 0
count_load_appearance$count_present=count_present %>%map(function(x) if (!x==0) {x=1} else {x=0}) %>% unlist
count_load_appearance$count=count_load_appearance$count+count_load_appearance$count_present
count_load_appearance=count_load_appearance %>% select(-count_present)
PCA_1=rbind(PCA_1,data.frame(load[,1]%>% t))
PCA_2=rbind(PCA_2,data.frame(load[,2]%>% t))
PCA_3=rbind(PCA_3,data.frame(load[,3]%>% t))
initial=initial+A
if (stop_loop_signal==TRUE){continue=FALSE}
if (initial>=dim(data)[1]){stop_loop_signal=TRUE}
if (initial>dim(data)[1]){initial=dim(data)[1]}
}
return (list(PCA_1,PCA_2,PCA_3,count_load_appearance))
}
result=Rollingwindow(data_filtered,110,1)
plot_bar=result[[4]] %>% filter(!count==0) %>% arrange(desc(count)) %>% head(20)
par(mfrow=c(1,1))
par(mar=c(5,10,4,1)+.1)
barplot(plot_bar$count,names.arg=rownames(plot_bar),horiz=TRUE,las=2,xlab="Appearance",main="Factor Appearance in Principal Components")
stock_trading_data_raw_to_group
